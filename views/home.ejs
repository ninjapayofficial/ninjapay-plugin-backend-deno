<!-- views/home.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <!-- Meta tags for responsiveness -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <!-- Include Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha384-k6RqeWeci5ZR/Lv4MR0sA0FJGek5y6iw6S1Q0iQca2VYzZdLFYQxjNIRNZd7Uq0N" crossorigin="anonymous">
    <!-- Include Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #F6F9FD;
            padding: 0;
            margin: 0;
        }

        .sidebar {
            height: 100vh;
            width: 240px;
            position: fixed;
            top: 0;
            left: 0;
            background-color: #fff;
            padding: 20px;
            border-right: 1px solid #ddd;
            overflow-y: auto;
        }

        .sidebar h4 {
            margin-top: 20px;
            margin-bottom: 20px;
        }

        .sidebar .nav-item {
            margin: 10px 0;
            color: #88a1ac;
        }

        .sidebar .nav-link {
            color: #88a1ac;
            cursor: pointer;
            text-decoration: none;
        }

        .sidebar .nav-link.active {
            color: #21728D;
            font-weight: bold;
        }

        .content {
            margin-left: 260px;
            padding: 20px;
        }

        .balance-section {
            background-color: #e8f5e9;
            padding: 20px;
            border-radius: 4px;
            max-width: fit-content;
            padding-right: 140px;
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .balance-section h2 {
            color: #2e7d32;
            margin: 0;
            font-weight: bold;
        }

        .tabs-bg {
            background-color: #F9FBFC;
            margin-left: -40px;
            margin-top: -20px;
            margin-right: -20px;
            margin-bottom: 20px;
            display: flex;
            border-bottom: 1px solid #ddd;
        }

        .tabs {
            margin-bottom: 20px;
            margin-top: 20px;
            margin-left: 40px;
            display: flex;
            gap: 10px;
        }

        .tabs .tab-item {
            padding: 10px 20px;
            border-radius: 40px;
            border: none;
            cursor: pointer;
            background-color: #F9FBFC;
            color: black;
            font-weight: 500;
            transition: all 0.2s ease-in-out;
        }

        .tabs .tab-item.active {
            background-color: #EFF0F5;
            box-shadow: inset 4px 4px 6px -1px rgba(0, 0, 0, 0.2),
                inset -4px -4px 6px -1px rgba(255, 255, 255, 0.7),
                -0.5px -0.5px 0px #C3D6ED,
                0.5px 0.5px 0px rgba(0, 0, 0, 0.15),
                0px 12px 10px -10px rgba(0, 0, 0, 0.05);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .transaction-table {
            width: 100%;
            margin-top: 10px;
        }

        .transaction-table table {
            width: 100%;
            border-collapse: collapse;
            background-color: #fff;
            border-radius: 1px;
            overflow: hidden;
        }

        .transaction-table th,
        .transaction-table td {
            padding: 15px;
            border: 1px solid rgba(0, 0, 0, 0.1);
            text-align: left;
        }

        .transaction-table th {
            background-color: #f9f9f9;
            color: #333;
        }

        .transaction-table tbody tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .btn-primary {
            margin-right: 10px;
            background-color: #21728D;
            border-color: #21728D;
        }

        .btn-primary:hover {
            background-color: #3da0c1;
            border-color: #3da0c1;
        }

        .btn-secondary {
            background-color: #88a1ac;
            border-color: #88a1ac70;
        }

        .btn-secondary:hover {
            background-color: #88a1acc0;
            border-color: #88a1acc0;
        }

        .error {
            color: red;
        }

        .copy-invoice {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }

        .logout-btn {
            position: absolute;
            top: 30px;
            right: 20px;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #88a1ac;
        }

        .logout-btn:hover {
            color: #21728D;
        }
    </style>
</head>

<body>
    <div class="sidebar">
        <h4>Menu</h4>
        <nav class="nav flex-column">
            <a class="nav-item nav-link active" href="#" onclick="loadHome()">Home</a>
            <a class="nav-item nav-link" href="#" onclick="togglePluginsMenu()">Plugins <i class="fas fa-caret-down"></i></a>
            <div id="pluginsMenu" style="display: none; margin-left: 15px;">
                <% plugins.forEach(function(plugin) { %>
                    <a class="nav-item nav-link" href="#" onclick="loadPlugin('<%= plugin %>')"><%= plugin.replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase()) %></a>
                <% }); %>
            </div>
            <!-- Other menu items -->
            <a class="nav-item nav-link" href="#">Developers</a>
            <a class="nav-item nav-link" href="https://ninjapay.notion.site/12dd4f66270880f7b599cd9d7804a1ae" target="_blank">Report Bug</a>
            <a class="nav-item nav-link" href="#">Settings</a>
        </nav>
    </div>

    <div class="content">
        <!-- Logout Button -->
        <button class="logout-btn" onclick="logout()">‚èª</button>
        <!-- Provider Tabs -->
        <div class="tabs-bg">
            <div class="tabs">
                <button class="tab-item <% if (defaultProvider === 'opennode') { %>active<% } %>" onclick="switchTab('opennode')">Opennode ‚ö°</button>
                <button class="tab-item <% if (defaultProvider === 'lnbits') { %>active<% } %>" onclick="switchTab('lnbits')">LNbits ‚ö°</button>
                <button class="tab-item <% if (defaultProvider === 'cashfree') { %>active<% } %>" onclick="switchTab('cashfree')">Cashfree üèõÔ∏è</button>
                <button class="tab-item <% if (defaultProvider === 'paytm') { %>active<% } %>" onclick="switchTab('paytm')">Paytm üèõÔ∏è</button>
                <button class="tab-item" onclick="addNewProvider()">ADD +</button>
            </div>
        </div>

        <!-- Main Content Area -->
        <div id="mainContent">
            <div class="balance-section">
                <h2 id="balanceAmount"><%= balanceAmount %> <%= currency %></h2>
                <p id="withdrawableAmount">Available to withdraw: ‚Çπ<%= withdrawableAmount %></p>
                <button class="btn btn-primary" onclick="openModal('create')">Create</button>
                <button class="btn btn-secondary" onclick="openModal('withdraw')">Withdraw</button>
                <div id="balanceError" class="error"><%= balanceError %></div>
            </div>
            <div class="transaction-table">
                <table class="table">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Description</th>
                            <th>Transaction ID</th>
                        </tr>
                    </thead>
                    <tbody id="transactionsTableBody">
                        <% transactions.forEach(function(tx, index) { %>
                            <tr>
                                <td><%= index + 1 %></td>
                                <td><%= tx.createdAt ? new Date(tx.createdAt).toLocaleString() : 'N/A' %></td>
                                <td><%= tx.amount !== null ? tx.amount + ' ' + tx.currency : 'N/A' %></td>
                                <td><%= tx.description || 'N/A' %></td>
                                <td><%= tx.txid || 'N/A' %></td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
                <div id="transactionsError" class="error"><%= transactionsError %></div>
            </div>
        </div>
    </div>

    <!-- Create/Withdraw Modal -->
    <div class="modal fade" tabindex="-1" id="actionModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <!-- The modal title will be set dynamically -->
                    <h5 class="modal-title" id="modalTitle">Action</h5>
                    <button type="button" class="btn-close" onclick="closeModal()"></button>
                </div>
                <div class="modal-body">
                    <form id="modalForm">
                        <div class="mb-3" id="amountField">
                            <label for="amount" class="form-label">Amount (SAT)</label>
                            <input type="number" class="form-control" id="amount" required>
                        </div>
                        <div class="mb-3" id="descriptionField">
                            <label for="description" class="form-label">Description</label>
                            <input type="text" class="form-control" id="description">
                        </div>
                        <div class="mb-3" id="invoiceField" style="display: none;">
                            <label for="invoice" class="form-label">Lightning Invoice</label>
                            <input type="text" class="form-control" id="invoice" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Close</button>
                    <button type="button" class="btn btn-primary" onclick="submitAction()">Submit</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Invoice Modal -->
    <div class="modal fade" tabindex="-1" id="invoiceModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Invoice Created</h5>
                    <button type="button" class="btn-close" onclick="closeInvoiceModal()"></button>
                </div>
                <div class="modal-body">
                    <div class="copy-invoice">
                        <input type="text" id="invoiceLink" class="form-control" readonly value="<%= generatedInvoice %>">
                        <button class="btn btn-primary" onclick="copyInvoice()">Copy</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Include Bootstrap JS and dependencies -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <!-- Your custom JavaScript -->
    <script>
        // Function to toggle the plugins menu
        function togglePluginsMenu() {
            const pluginsMenu = document.getElementById('pluginsMenu');
            if (pluginsMenu.style.display === 'none' || pluginsMenu.style.display === '') {
                pluginsMenu.style.display = 'block';
            } else {
                pluginsMenu.style.display = 'none';
            }
        }

        // Function to highlight the active sidebar item
        function highlightSidebarItem(itemName) {
            const navItems = document.querySelectorAll('.sidebar .nav-link');
            navItems.forEach(item => {
                if (item.textContent.trim() === itemName) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            });
        }

        // Function to load the home content
        function loadHome() {
            // Highlight "Home" in the sidebar
            highlightSidebarItem('Home');

            // Reset the main content area to the home screen
            loadHomeContent();
        }

        // Function to load plugin interfaces
        function loadPlugin(pluginName) {
            console.log(`Loading plugin: ${pluginName}`);
            // Highlight the selected plugin in the sidebar
            highlightSidebarItem(pluginName.replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase()));

            // Clear the main content area
            const mainContent = document.getElementById('mainContent');
            mainContent.innerHTML = '';

            // Create an iframe
            const iframe = document.createElement('iframe');
            iframe.src = `/plugins/${pluginName}/`;
            iframe.style.width = '100%';
            iframe.style.height = '100vh';
            iframe.style.border = 'none';

            // Append the iframe to the mainContent
            mainContent.appendChild(iframe);
        }

        // Function to check if we're on the home screen
        function isHomeScreen() {
            // Determine if the main content area is displaying the home content
            // For simplicity, check if the balance section exists
            return document.getElementById('balanceAmount') !== null;
        }

        // Function to load the home content into the main content area
        function loadHomeContent() {
            // Clear the main content area
            document.getElementById('mainContent').innerHTML = `
                <div class="balance-section">
                    <h2 id="balanceAmount"><%= balanceAmount %> <%= currency %></h2>
                    <p id="withdrawableAmount">Available to withdraw: ‚Çπ<%= withdrawableAmount %></p>
                    <button class="btn btn-primary" onclick="openModal('create')">Create</button>
                    <button class="btn btn-secondary" onclick="openModal('withdraw')">Withdraw</button>
                    <div id="balanceError" class="error"><%= balanceError %></div>
                </div>
                <div class="transaction-table">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Date</th>
                                <th>Amount</th>
                                <th>Description</th>
                                <th>Transaction ID</th>
                            </tr>
                        </thead>
                        <tbody id="transactionsTableBody">
                            <% transactions.forEach(function(tx, index) { %>
                                <tr>
                                    <td><%= index + 1 %></td>
                                    <td><%= tx.createdAt ? new Date(tx.createdAt).toLocaleString() : 'N/A' %></td>
                                    <td><%= tx.amount !== null ? tx.amount + ' ' + tx.currency : 'N/A' %></td>
                                    <td><%= tx.description || 'N/A' %></td>
                                    <td><%= tx.txid || 'N/A' %></td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                    <div id="transactionsError" class="error"><%= transactionsError %></div>
                </div>
            `;

            // Load balance and transactions for the current default provider
            getDefaultProvider();
        }

        // Function to switch between providers
        async function switchTab(tabName) {
            // Set active tab after provider is set
            await setDefaultProvider(tabName); // Wait for the default provider to be set

            // Reload the home content
            loadHomeContent();

            // Highlight the default provider tab
            const tabs = document.querySelectorAll('.tab-item');
            tabs.forEach(tab => {
                if (tab.textContent.toLowerCase().includes(tabName)) {
                    tab.classList.add('active');
                } else {
                    tab.classList.remove('active');
                }
            });
        }


        // Function to open the action modal
        function openModal(action) {
            const modal = new bootstrap.Modal(document.getElementById('actionModal'));
            document.getElementById('modalTitle').innerText = action.charAt(0).toUpperCase() + action.slice(1);

            // Toggle form fields based on action type
            if (action === 'create') {
                document.getElementById('amountField').style.display = 'block';
                document.getElementById('descriptionField').style.display = 'block';
                document.getElementById('invoiceField').style.display = 'none';
            } else if (action === 'withdraw') {
                document.getElementById('amountField').style.display = 'none';
                document.getElementById('descriptionField').style.display = 'none';
                document.getElementById('invoiceField').style.display = 'block';
            }

            modal.show();
        }

        function closeModal() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('actionModal'));
            modal.hide();
        }

        // Function to submit the action (create or withdraw)
        function submitAction() {
            const action = document.getElementById('modalTitle').innerText.toLowerCase();
            if (action === 'create') {
                const amount = document.getElementById('amount').value;
                const description = document.getElementById('description').value;
                createPaymentLink(amount, description);
            } else if (action === 'withdraw') {
                const invoice = document.getElementById('invoice').value;
                withdrawPayment(invoice);
            }

            closeModal();
        }

        // Function to load the balance for the default provider
        async function loadBalance(provider) {
            try {
                const response = await fetch(`/balance?provider=${provider}`, {
                    credentials: 'include'
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Failed to load balance');
                }
                const data = await response.json();
                document.getElementById('balanceAmount').textContent = `${data.balance || 0} ${data.currency}`;
                document.getElementById('withdrawableAmount').textContent = `Available to withdraw: ‚Çπ${data.withdrawable || 0}`;
                document.getElementById('balanceError').textContent = '';
            } catch (error) {
                console.error('Error loading balance:', error);
                document.getElementById('balanceError').textContent = error.message;
                document.getElementById('balanceAmount').textContent = 'Error loading balance';
            }
        }

        // Function to load transactions for the default provider
        async function loadTransactions(provider) {
            try {
                const response = await fetch(`/transactions?provider=${provider}`, {
                    credentials: 'include'
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Failed to load transactions');
                }
                const transactions = await response.json();
                const tbody = document.getElementById('transactionsTableBody');
                tbody.innerHTML = '';
                transactions.forEach((tx, index) => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${tx.createdAt ? new Date(tx.createdAt).toLocaleString() : 'N/A'}</td>
                        <td>${tx.amount !== null ? tx.amount + ' ' + tx.currency : 'N/A'}</td>
                        <td>${tx.description || 'N/A'}</td>
                        <td>${tx.txid || 'N/A'}</td>
                    `;
                    tbody.appendChild(tr);
                });
                document.getElementById('transactionsError').textContent = '';
            } catch (error) {
                console.error('Error loading transactions:', error);
                document.getElementById('transactionsError').textContent = error.message;
                document.getElementById('transactionsTableBody').innerHTML = `<tr><td colspan="5">Error loading transactions</td></tr>`;
            }
        }

        // Function to create a payment link
        async function createPaymentLink(amount, description) {
            try {
                const response = await fetch('/createPayLink', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: `amount=${encodeURIComponent(amount)}&memo=${encodeURIComponent(description)}`,
                    credentials: 'include'
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Failed to create payment link');
                }
                const data = await response.json();
                console.log('Payment link created successfully:', data);
                loadTransactions('<%= defaultProvider %>'); // Reload transactions to show the new payment link

                // Display the invoice in a modal
                const invoiceModal = new bootstrap.Modal(document.getElementById('invoiceModal'));
                document.getElementById('invoiceLink').value = data.payment_request;
                invoiceModal.show();
            } catch (error) {
                console.error('Error creating payment link:', error);
                document.getElementById('balanceError').textContent = error.message;
            }
        }

        // Function to withdraw payment
        async function withdrawPayment(invoice) {
            try {
                const response = await fetch('/payInvoice', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: `paymentRequest=${encodeURIComponent(invoice)}`,
                    credentials: 'include'
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Failed to withdraw payment');
                }
                const data = await response.json();
                console.log('Payment withdrawn successfully:', data);
                loadBalance('<%= defaultProvider %>'); // Reload balance to reflect the withdrawal
                loadTransactions('<%= defaultProvider %>'); // Reload transactions to reflect the withdrawal
            } catch (error) {
                console.error('Error withdrawing payment:', error);
                document.getElementById('balanceError').textContent = error.message;
            }
        }

        // Function to set the default provider
        async function setDefaultProvider(provider) {
            try {
                const response = await fetch('/set-default-provider', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: `providerIndex=${getProviderIndex(provider)}`,
                    credentials: 'include'
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Failed to set default provider');
                }
                console.log('Default provider set successfully.');
            } catch (error) {
                console.error('Error setting default provider:', error);
                if (document.getElementById('balanceError')) {
                    document.getElementById('balanceError').textContent = error.message;
                }
            }
        }

        // Function to get the index of a provider in the fundingProviders array
        function getProviderIndex(providerName) {
            const fundingProviders = JSON.stringify(fundingProviders) ;
            for (let i = 0; i < fundingProviders.length; i++) {
                if (fundingProviders[i].provider === providerName) {
                    return i;
                }
            }
            return -1;
        }

        // Function to get the default provider
        async function getDefaultProvider() {
            try {
                // Assuming defaultProvider is already set and passed from the server
                const defaultProvider = '<%= defaultProvider %>';

                // Highlight the default provider tab
                const tabs = document.querySelectorAll('.tab-item');
                tabs.forEach(tab => {
                    if (tab.textContent.toLowerCase().includes(defaultProvider)) {
                        tab.classList.add('active');
                    } else {
                        tab.classList.remove('active');
                    }
                });

                // Load balance and transactions for the default provider
                loadBalance(defaultProvider);
                loadTransactions(defaultProvider);
            } catch (error) {
                console.error('Error fetching default provider:', error);
            }
        }

        // Function to add a new provider
        function addNewProvider() {
            window.location.href = '/funding';
        }

        // Function to copy the invoice to clipboard
        function copyInvoice() {
            const invoiceLink = document.getElementById('invoiceLink');
            invoiceLink.select();
            document.execCommand('copy');
            alert('Invoice copied to clipboard');
        }

        // Function to close the invoice modal
        function closeInvoiceModal() {
            const invoiceModal = bootstrap.Modal.getInstance(document.getElementById('invoiceModal'));
            invoiceModal.hide();
        }

        // Function to log out the user
        function logout() {
            fetch('/logout', {
                method: 'GET',
                credentials: 'include',
            })
                .then(response => {
                    if (response.ok) {
                        window.location.href = '/login';
                    } else {
                        return response.text().then(text => { throw new Error(text); });
                    }
                })
                .catch(error => {
                    console.error('Logout error:', error);
                    alert('Error logging out.');
                });
        }

        // Start by loading the home content and default provider
        document.addEventListener('DOMContentLoaded', () => {
            // Load the home content
            loadHomeContent();

            // Get the default provider
            getDefaultProvider();
        });
    </script>
</body>

</html>
